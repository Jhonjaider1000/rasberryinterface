#!/usr/bin/env node

/**
 * Module dependencies.
 */

const SOCKET_MESSAGES = {
  FETCH: "FETCH",
  SET_GROUP: "SET_GROUP",
  GET_LAST_USER: "GET_LAST_USER",
  NEW_LAST_USER: "NEW_LAST_USER",
  ADD_HISTORY: "ADD_HISTORY",
  ADD_USER: "ADD_USER",
  GET_TEMPERATURE: "GET_TEMPERATURE",
};

var app = require("../app");
var debug = require("debug")("rasberrysocket:server");
var http = require("http");
var config = require("../config.json");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.port || "4000");

const SerialPort = require("serialport");
const Readline = SerialPort.parsers.Readline;

const portCOM = new SerialPort(config.portCOM, { baudRate: 9600 });
const parser = new Readline();
portCOM.pipe(parser);

portCOM.on("open", () => {
  console.log("Conectado al puerto.");
});

portCOM.on("close", () => {
  console.log("Se cerró la conexión.");
});

portCOM.on("error", () => {
  console.log("Se perdió la conexión.");
});

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//Socket clients...
let clients = [];

//Socket functions...
const getApiAndEmit = (socket) => {
  try {
    socket.emit("message", { id: socket.id, type: "WELCOME" });
  } catch (error) {
    console.error(`Error: ${error.code}`);
  }
};

const addSocketEvents = (socket) => {
  socket.on("message", (msg) => {
    if (msg.type == SOCKET_MESSAGES.GET_TEMPERATURE) {
      portCOM.write("t\n");
    } else if (msg.type == SOCKET_MESSAGES.SET_GROUP) {
      socket.dispositivo = msg.dispositivo;
      parser.on("data", function (temperature) {
        socket.emit("message", {
          type: SOCKET_MESSAGES.GET_TEMPERATURE,
          temperature: temperature,
        });
        portCOM.write("r\n");
      });
    }
  });
  socket.on("connect", (socket) => {
    console.log("Connected user", socket.id);
  });
};

//Socket evetns...
const io = require("socket.io")(server);
io.on("connection", (socket) => {
  console.log("Se conectó un usuario nuevo: ", socket.id);
  getApiAndEmit(socket);
  addSocketEvents(socket);
  clients.push(socket);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log("Listening on http://localhost:" + port);
  debug("Listening on " + bind);
}

//AQUI VA LO DEL SerialPort.
/*
Por favor, adjuntar aquí el objeto construido...
{}
*/
